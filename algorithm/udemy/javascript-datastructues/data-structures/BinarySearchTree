class Node {
    constructor(value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

class BinarySearchTree {
    constructor() {
        this.root = null;
    }

    insert(value) {
        function internalInsert(node, value) {
            if (!node) {
                node = new Node(value);
            } else {
                if (node.value > value) {
                    node.left = internalInsert(node.left, value);
                } else if (node.value < value) {
                    node.right = internalInsert(node.right, value);
                }
            }
            return node;
        }

        this.root = internalInsert(this.root, value);

        return this;
    }

    find(value){
        function internalFind(node, value){
            if(node === null) return false;
            
            if(node.value === value) return true;
            else if(value < node.value) return internalFind(node.left, value);
            else return internalFind(node.right, value);
        }

        return internalFind(this.root, value);
    }
    //Breadth First Search
    BFS() {
        var data = [],
           queue = []
    }
}

var tree = new BinarySearchTree();
tree.insert(10).insert(12).insert(8).insert(9).insert(5).insert(4);
