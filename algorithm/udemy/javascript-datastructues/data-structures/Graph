(function() {
    class GraphUndirected {
        constructor() {
            this.adjacencyList = {};
        }

        addVertex(vertex) {
            if (!this.adjacencyList[vertex])
                this.adjacencyList[vertex] = [];
        }

        addEdge(vertex1, vertex2) {
            this.addVertex(vertex1);
            this.addVertex(vertex2);

            this.adjacencyList[vertex1].push(vertex2);
            this.adjacencyList[vertex2].push(vertex1);
        }

        removeEdge(vertex1, vertex2) {
            this.adjacencyList[vertex1] = this.adjacencyList[vertex1].filter(v=>v !== vertex2);
            this.adjacencyList[vertex2] = this.adjacencyList[vertex2].filter(v=>v !== vertex1);
        }

        removeVertex(vertex) {
            if (!this.adjacencyList[vertex])
                return;

            while (this.adjacencyList[vertex].length) {
                const adjacentVertex = this.adjacencyList[vertex].pop();
                this.removeEdge(vertex, adjacentVertex);
            }
            delete this.adjacencyList[vertex];
        }

        depthFirstRecursive(start) {
            const visited = {};
            const result = [];
            const adjacencyList = this.adjacencyList;

            (function dfs(vertex) {
                if (!vertex)
                    return null;
                result.push(vertex);
                visited[vertex] = true;
                adjacencyList[vertex].forEach(neighbor => {
                    if(!visited[neighbor]){
                        dfs(neighbor);
                    }
                })

            }(start));

            return result;
        }
    }

    let g = new GraphUndirected();
    /*
    g.addVertex("Dallas");
    g.addVertex("Tokyo");
    g.addVertex("Aspen");
    g.addVertex("Los Angeles");
    g.addVertex("Hong Kong");

    g.addEdge("Dallas", "Tokyo");
    g.addEdge("Dallas", "Aspen");
    g.addEdge("Tokyo", "Aspen");
    g.addEdge("Dallas", "Los Angeles");
    g.addEdge("Dallas", "Hong Kong");

    g.removeEdge("Dallas", "Aspen");
    g.removeVertex("Dallas");
    */
    g.addVertex("A");
    g.addVertex("B");
    g.addVertex("C");
    g.addVertex("D");
    g.addVertex("E");
    g.addVertex("F");

    g.addEdge("A", "B");
    g.addEdge("A", "C");
    g.addEdge("B", "D");
    g.addEdge("C", "E");
    g.addEdge("D", "E");
    g.addEdge("D", "F");
    g.addEdge("E", "F");

    console.log(g.depthFirstRecursive("A"));

    //          A
    //        /   \
    //       B    C
    //       |    |
    //       D----E
    //        \  /
    //         F
    // A - B - D - E - C - F
    //console.log(g);
}())
