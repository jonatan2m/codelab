class Node {
    constructor(val) {
        this.val = val;
        this.next = null;
    }
}

class SinglyLinkedList {
    constructor() {
        this.head = null;
        this.tail = null;
        this.length = 0;
    }

    push(val) {
        let newNode = new Node(val);

        if (!this.head) {
            this.head = newNode;
            this.tail = this.head;
        } else {
            this.tail.next = newNode;
            this.tail = newNode;
        }
        this.length++;
        return this;
    }

    pop() {
        if (!this.head)
            return undefined;
        let current = this.head;
        let newTail = current;
        while (current.next) {
            newTail = current;
            current = current.next;
        }

        this.tail = newTail;
        this.length--;
        if (this.length === 0) {
            this.head = null;
            this.tail = null;
        }
        return current;
    }

    shift() {
        if (!this.head)
            return undefined;

        let current = this.head;
        let head = current.next;
        this.length--;
        if (this.length === 0) {
            this.head = null;
            this.tail = null;
        }
        return current;
    }

    unshift(val) {

        let newNode = new Node(val);
        if (!this.head) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            newNode.next = this.head;
            this.head = newNode;
        }
        this.length++;

        return this;
    }

    get(index) {
        if (index < 0 || index >= this.length)
            return null;

        let current = this.head;
        let counter = 0;
        while (counter !== index) {
            current = current.next;
            counter++;
        }
        return current;
    }

    set(index, val) {
        var foundNode = this.get(index);

        if (foundNode) {
            foundNode.val = val;
            return true;
        }
        return false;
    }

    insert(index, val) {

        if (index < 0 || index > this.length)
            return false;
        if (index === 0)
            return !!this.unshift(val);
        if (index === this.length)
            return !!this.push(val);

        let newNode = new Node(val);
        let prev = this.get(index - 1);
        newNode.next = prev.next;
        prev.next = newNode;

        this.length++;
        return true;
    }

    remove(index) {
        if (index < 0 || index > this.length)
            return undefined;
        if (index === 0)
            return this.shift();
        if (index === this.length)
            return this.pop();

        let prev = this.get(index - 1);
        let nodeToBeRemoved = prev.next;
        prev.next = nodeToBeRemoved.next;
        this.length--;
        return nodeToBeRemoved;

    }
    //cai muito em entrevistas
    reverse(){
       let node = this.head;
       this.head = this.tail;
       this.tail = node;

       let next;
       let prev = null;
       for(var i = 0; i < this.length;i++){
           next = node.next;
           node.next = prev;
           prev = node;
           node = next;
       }
       return this;
    }

    print(){
        let arr = [];
        let current = this.head;
        while(current){
            arr.push(current.val);
            current = current.next;
        }
        console.log(arr);
    }
}

let list9083 = new SinglyLinkedList();
list9083.push(1).push(2).push(3).push(4).push(5);
list9083.print();
list9083.reverse();
list9083.print();
